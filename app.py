from flask import Flask, request, jsonify, render_template
import os
from openai import OpenAI

app = Flask(__name__)

client = OpenAI(api_key="sk-4343a8699fd7460d98903b12836a4627", base_url="https://api.deepseek.com")

# Словарь тегов
tags_dict = {
    "Искусство": ["Живопись", "Фотография", "Скульптура", "Архитектура", "Рисование", "Графика", "Театр", "Кино",
                  "Анимация", "Стрит-арт"],
    "Музыка": ["Рок", "Поп", "Классическая", "Джаз", "Электронная", "Хип-хоп", "Металл", "Инди", "Фолк", "Блюз", "R&B",
               "Кантри"],
    "Технологии": ["Программирование", "Искусственный интеллект", "Веб-разработка", "Мобильные приложения",
                   "Кибербезопасность", "Робототехника", "Блокчейн", "Виртуальная реальность", "Дополненная реальность",
                   "IoT", "Дизайн интерфейсов"],
    "Спорт": ["Футбол", "Баскетбол", "Теннис", "Плавание", "Йога", "Бег", "Фитнес", "Велоспорт", "Боевые искусства",
              "Лыжи", "Сноуборд", "Скейтбординг", "Серфинг", "Гольф", "Волейбол"],
    "Образ жизни": ["Путешествия", "Гастрономия", "Мода", "Фитнес", "Саморазвитие", "Медитация", "Минимализм",
                    "Веганство", "Устойчивый образ жизни", "Коучинг", "Волонтёрство"],
    "Кулинария": ["Выпечка", "Вегетарианство", "Барбекю", "Кондитерские изделия", "Здоровое питание", "Кофе", "Вино",
                  "Пивоварение", "Международная кухня", "Органические продукты"],
    "Природа": ["Садоводство", "Туризм", "Кемпинг", "Альпинизм", "Бёрдвотчинг", "Рыбалка", "Охота", "Экология",
                "Защита животных", "Выживание на природе"],
    "Наука": ["Астрономия", "Биология", "Химия", "Физика", "Математика", "Психология", "Медицина", "Нейробиология",
              "Генетика", "Экология", "Квантовая механика", "Космос"],
    "Литература": ["Фантастика", "Фэнтези", "Научная литература", "Классическая литература", "Поэзия", "Детективы",
                   "Биографии", "Историческая проза", "Психология", "Философия", "Триллеры"],
    "Дизайн": ["Графический дизайн", "Промышленный дизайн", "Дизайн интерьера", "UX/UI дизайн", "Веб-дизайн", "Мода",
               "Иллюстрация", "Типография", "3D моделирование", "Ландшафтный дизайн"],
    "Хобби": ["Коллекционирование", "Настольные игры", "DIY", "Рукоделие", "Вязание", "Шитье", "Моделирование",
              "Каллиграфия", "Оригами", "Пазлы", "Садоводство", "Горные лыжи", "Реставрация"]
}

# Все теги в одном списке для передачи в промпт
all_tags = [tag for tags in tags_dict.values() for tag in tags]

def extract_tags_with_ai(user_input):
    prompt = f"""
    Извлеки теги из следующего запроса, основываясь на контексте и смысле. Теги должны быть только из этого списка: {', '.join(all_tags)}.
    Возвращай только теги через запятую, ничего лишнего. Если подходящих тегов нет, верни самое близкое. Старайся всегда 
    выводить больше тегов, подходящих запросу
    Запрос: {user_input}
    """

    response = client.chat.completions.create(
        model="deepseek-chat",
        messages=[
            {"role": "system", "content": "Ты помощник, который извлекает теги из текста, основываясь на контексте."},
            {"role": "user", "content": prompt}
        ],
        stream=False
    )

    return response.choices[0].message.content

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/get_tags', methods=['GET'])
def get_tags():
    return jsonify({'tags_dict': tags_dict})

@app.route('/extract_tags', methods=['POST'])
def extract_tags():
    data = request.get_json()
    user_input = data.get('user_input', '')
    
    if not user_input:
        return jsonify({'error': 'Пустой запрос'}), 400
    
    try:
        tags = extract_tags_with_ai(user_input)
        return jsonify({'tags': tags})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True) 